1
00:00:06,243 --> 00:00:10,243
Привет и добро пожаловать в день 03 - День Указателей!

2
00:00:10,525 --> 00:00:14,525
Указатели являются новым переменным типом, которому я собираюсь научить вас.

3
00:00:14,947 --> 00:00:18,947
Это одна из самых полезных переменных в C.

4
00:00:18,947 --> 00:00:22,947
Благоадря указателю вы сможете обладать адресом другой переменной

5
00:00:22,947 --> 00:00:24,887
и удаленно изменять содержимое это переменной.

6
00:00:24,952 --> 00:00:27,952
И это то, на что мы собираемся взглянуть в течение нескольких минут.

7
00:00:28,068 --> 00:00:31,698
Для того, чтобы использовать указатели, вы должны в первую очередь понимать,

8
00:00:31,698 --> 00:00:33,948
что то о Памяти.

9
00:00:34,006 --> 00:00:39,906
Когда процесс запущен, у него есть право иметь практически всю существующую память.

10
00:00:40,884 --> 00:00:44,884
С 32 битной системой мы будем обладать 4GB памяти, а с 64 битной системой, мы будем обладать гораздо большим количеством памяти.

11
00:00:44,909 --> 00:00:48,909
Я не знаю наизусть точной цифры ... Но это 2 в 64 степени ...

12
00:00:48,909 --> 00:00:52,139
Тут вам нужно использовать математику.

13
00:00:52,419 --> 00:00:54,649
Так же нужно понимать что вся эта память для каждого процесса является виртуальной.

14
00:00:54,695 --> 00:00:58,695
Which means than behind this memory, whether it's mapped somewhere on the RAM,

15
00:00:58,695 --> 00:01:02,695
or on the hard drive, or wherever else... Do some research. And check out "swap",

16
00:01:02,695 --> 00:01:06,355
and you might understand this better...

17
00:01:06,484 --> 00:01:10,484
This memory is mapped by something called MMU,

18
00:01:10,484 --> 00:01:14,484
which allows you to reserve memory somewhere, physically on the computer.

19
00:01:14,507 --> 00:01:20,187
However, a given process has its own memory, and it does what it wants with it.

20
00:01:20,830 --> 00:01:24,830
The memory is divided into two parts : high memory and low memory.

21
00:01:25,296 --> 00:01:30,076
We call high memory, "stack". Dunno if you've hear this before, but ...

22
00:01:30,726 --> 00:01:34,726
the stack... every time you call a function,

23
00:01:34,726 --> 00:01:38,726
every time you do anything, etc... when you type "int a;" for example,

24
00:01:38,726 --> 00:01:42,726
in your main, let's say... You've just allocated 4 bits, or 8,

25
00:01:42,739 --> 00:01:46,739
depending on which architecture we're using, on the stack.

26
00:01:46,741 --> 00:01:50,261
So on the high part of the memory.

27
00:01:50,282 --> 00:01:54,032
So you're all the way at the top, at the level of 2 to the power of 64,

28
00:01:54,032 --> 00:01:57,082
And little by little, you go down, along with the stack.

29
00:01:57,114 --> 00:02:00,384
The more elements you add, the further down the stack you'll go.

30
00:02:00,591 --> 00:02:04,591
On the other hand, you've got low memory. Also called "heap"

31
00:02:04,682 --> 00:02:07,022
A notion we'll explore some other day.

32
00:02:07,044 --> 00:02:09,564
The heap is the place where you can allocate memory.

33
00:02:09,564 --> 00:02:11,984
Again, that's for another day.

34
00:02:12,293 --> 00:02:16,293
In the next videos, we'll learn how pointers work and what they're for, etc...
